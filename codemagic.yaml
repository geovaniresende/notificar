workflows:
  ios-manual-signing:
    name: iOS Manual Signing
    environment:
      flutter: stable
      xcode: latest
      vars:
        BUNDLE_ID: com.new.notificar
      
        DEVELOPMENT_TEAM: WT5TSJ49FM
      
        CERTIFICATE_PASSWORD: 135013
       
        CERTIFICATE_P12: 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

      
        PROVISIONING_PROFILE: 

scripts:
  - name: Get Flutter dependencies
    script: flutter pub get

  - name: Fix Podfile for Codemagic
    script: |
      cat > ios/Podfile <<EOF
      platform :ios, '13.0'

      ENV['FLUTTER_ROOT'] ||= File.expand_path('../flutter')
      load File.join(ENV['FLUTTER_ROOT'], 'packages', 'flutter_tools', 'bin', 'podhelper.rb')

      target 'Runner' do
        flutter_install_all_ios_pods(File.dirname(File.realpath(__FILE__)))
      end
      EOF

  - name: Install CocoaPods
    script: |
      cd ios
      pod install
      cd ..

  - name: Set up code signing
    script: |
      keychain initialize
      keychain add-certificates

  - name: Build and archive iOS app
    script: |
      flutter build ios --release
      cd ios
      xcodebuild archive \
        -workspace Runner.xcworkspace \
        -scheme Runner \
        -configuration Release \
        -archivePath build/Runner.xcarchive \
        -destination 'generic/platform=iOS' \
        -allowProvisioningUpdates \
        DEVELOPMENT_TEAM=WT5TSJ49FM

  - name: Export .ipa
    script: |
      cd ios
      cat > ExportOptions.plist <<EOF
      <?xml version="1.0" encoding="UTF-8"?>
      <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      <plist version="1.0">
      <dict>
        <key>method</key>
        <string>app-store</string>
        <key>teamID</key>
        <string>WT5TSJ49FM</string>
        <key>signingStyle</key>
        <string>manual</string>
        <key>provisioningProfiles</key>
        <dict>
          <key>com.new.notificar</key>
          <string>Notificar</string>
        </dict>
      </dict>
      </plist>
      EOF

      xcodebuild -exportArchive \
        -archivePath build/Runner.xcarchive \
        -exportPath build/ipa \
        -exportOptionsPlist ExportOptions.plist \
        -allowProvisioningUpdates

artifacts:
  - build/ipa/*.ipa

    